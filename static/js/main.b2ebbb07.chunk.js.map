{"version":3,"sources":["App.js","sw.js","index.js"],"names":["App","react_default","a","createElement","es6","activePanel","id","React","Component","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","connect","send","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ReactDOM","render","src_App","document","getElementById"],"mappings":"2PAsBeA,2LAfP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,YAAY,aACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOE,GAAG,aACNL,EAAAC,EAAAC,cAACC,EAAA,EAAD,gBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,8BARNG,IAAMC,YCMxB,SAASC,EAAgBC,GACxBC,UAAUC,cACRC,SAASH,GACTI,KAAK,SAACC,GACNA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBG,QAChBT,UAAUC,cAAcS,WAK3BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMhBC,MAAM,SAACC,GACPH,QAAQG,MAAM,4CAA6CA,KA6B9D,IAAMC,EAAcC,QAAqC,cAA7BC,OAAOC,SAASC,UAEd,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DC3DhCC,IAAQC,KAAK,eAAgB,ID6Dd,WACd,GAA6C,kBAAmBtB,UAAW,CAG1E,GADkB,IAAIuB,IAAIC,cAAwBP,OAAOC,UAC3CO,SAAWR,OAAOC,SAASO,OAIxC,OAGDR,OAAOS,iBAAiB,OAAQ,WAC/B,IAAM3B,EAAK,GAAA4B,OAAMH,cAAN,sBAEPT,GA7CP,SAAiChB,GAEhC6B,MAAM7B,GACJI,KAAK,SAAC0B,GAGe,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAACC,GACnCA,EAAa+B,aAAahC,KAAK,WAC9Bc,OAAOC,SAASkB,aAKlBtC,EAAgBC,KAGjBc,MAAM,WACNF,QAAQC,IAAI,mEA0BXyB,CAAwBtC,GAIxBC,UAAUC,cAAciC,MAAM/B,KAAK,WAClCQ,QAAQC,IACP,+GAMFd,EAAgBC,MCtFpBuC,GAEAC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b2ebbb07.chunk.js","sourcesContent":["import React from 'react';\nimport {Div, Group, Panel, PanelHeader, View} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <View activePanel=\"mainPanel\">\n                <Panel id=\"mainPanel\">\n                    <PanelHeader>Example</PanelHeader>\n                    <Group>\n                        <Div>\n                            Hello world\n                        </Div>\n                    </Group>\n                </Panel>\n            </View>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect';\nimport App from './App';\nimport registerServiceWorker from './sw';\n\n// Init VK App\nconnect.send('VKWebAppInit', {});\n\n// Service Worker For Cache\nregisterServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}